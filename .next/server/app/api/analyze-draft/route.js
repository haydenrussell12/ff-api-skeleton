"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze-draft/route";
exports.ids = ["app/api/analyze-draft/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-draft%2Froute&page=%2Fapi%2Fanalyze-draft%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-draft%2Froute.ts&appDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-draft%2Froute&page=%2Fapi%2Fanalyze-draft%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-draft%2Froute.ts&appDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_kanikameister_Documents_ff_api_skeleton_app_api_analyze_draft_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/analyze-draft/route.ts */ \"(rsc)/./app/api/analyze-draft/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze-draft/route\",\n        pathname: \"/api/analyze-draft\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze-draft/route\"\n    },\n    resolvedPagePath: \"/Users/kanikameister/Documents/ff_api_skeleton/app/api/analyze-draft/route.ts\",\n    nextConfigOutput,\n    userland: _Users_kanikameister_Documents_ff_api_skeleton_app_api_analyze_draft_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/analyze-draft/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplLWRyYWZ0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplLWRyYWZ0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZS1kcmFmdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmthbmlrYW1laXN0ZXIlMkZEb2N1bWVudHMlMkZmZl9hcGlfc2tlbGV0b24lMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGa2FuaWthbWVpc3RlciUyRkRvY3VtZW50cyUyRmZmX2FwaV9za2VsZXRvbiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDNkI7QUFDMUc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZl9hcGlfc2tlbGV0b24vP2QxZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2thbmlrYW1laXN0ZXIvRG9jdW1lbnRzL2ZmX2FwaV9za2VsZXRvbi9hcHAvYXBpL2FuYWx5emUtZHJhZnQvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FuYWx5emUtZHJhZnQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXplLWRyYWZ0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXplLWRyYWZ0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2thbmlrYW1laXN0ZXIvRG9jdW1lbnRzL2ZmX2FwaV9za2VsZXRvbi9hcHAvYXBpL2FuYWx5emUtZHJhZnQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FuYWx5emUtZHJhZnQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-draft%2Froute&page=%2Fapi%2Fanalyze-draft%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-draft%2Froute.ts&appDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze-draft/route.ts":
/*!****************************************!*\
  !*** ./app/api/analyze-draft/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_optimal_lineup_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/optimal-lineup-engine */ \"(rsc)/./app/lib/optimal-lineup-engine.ts\");\n/* harmony import */ var _lib_position_grade_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/position-grade-engine */ \"(rsc)/./app/lib/position-grade-engine.ts\");\nconst runtime = \"nodejs\";\n\n\n\n// Draft Analyzer class converted for Next.js\nclass DraftAnalyzer {\n    async initialize() {\n        try {\n            console.log(\"\\uD83D\\uDE80 Initializing Draft Analyzer...\");\n            // Load consolidated player data via imports so Vercel bundles them\n            const [masterPlayersModule, nameLookupModule, vorpDataModule, adpDataModule] = await Promise.all([\n                __webpack_require__.e(/*! import() */ \"_rsc_data_consolidated_master-players_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! data/consolidated/master-players.json */ \"(rsc)/./data/consolidated/master-players.json\", 19)),\n                __webpack_require__.e(/*! import() */ \"_rsc_data_consolidated_name-lookup-index_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! data/consolidated/name-lookup-index.json */ \"(rsc)/./data/consolidated/name-lookup-index.json\", 19)),\n                __webpack_require__.e(/*! import() */ \"_rsc_data_consolidated_player-vorp-scores_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! data/consolidated/player-vorp-scores.json */ \"(rsc)/./data/consolidated/player-vorp-scores.json\", 19)),\n                __webpack_require__.e(/*! import() */ \"_rsc_adp_data_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../../../adp_data.json */ \"(rsc)/./adp_data.json\", 19))\n            ]);\n            console.log(\"\\uD83D\\uDD0D Loaded modules:\", {\n                masterPlayers: !!masterPlayersModule,\n                nameLookup: !!nameLookupModule,\n                vorpData: !!vorpDataModule,\n                adpData: !!adpDataModule\n            });\n            // Create lookup by player name (case-insensitive)\n            const masterPlayers = masterPlayersModule.default.players;\n            console.log(\"\\uD83D\\uDD0D Master players structure:\", {\n                hasDefault: !!masterPlayersModule.default,\n                hasPlayers: !!masterPlayers,\n                playerCount: masterPlayers?.length || 0,\n                samplePlayer: masterPlayers?.[0]\n            });\n            this.consolidatedData = {};\n            masterPlayers.forEach((player)=>{\n                if (player.full_name) {\n                    // Store by both full_name and player_id for flexibility\n                    this.consolidatedData[player.full_name.toLowerCase()] = player;\n                    if (player.player_id) {\n                        this.consolidatedData[player.player_id.toLowerCase()] = player;\n                    }\n                }\n            });\n            this.nameLookupIndex = nameLookupModule.default;\n            this.vorpData = vorpDataModule.default.vorpScores || vorpDataModule.default;\n            // Create ADP lookup by player name - adp_data.json has players array\n            this.adpData = {};\n            const adpPlayers = adpDataModule.default.players || [];\n            console.log(\"\\uD83D\\uDD0D ADP data structure:\", {\n                hasDefault: !!adpDataModule.default,\n                hasPlayers: !!adpPlayers,\n                playerCount: adpPlayers?.length || 0,\n                samplePlayer: adpPlayers?.[0]\n            });\n            adpPlayers.forEach((player)=>{\n                if (player.full_name) {\n                    this.adpData[player.full_name.toLowerCase()] = player;\n                }\n            });\n            console.log(`✅ Draft Analyzer initialized with ${Object.keys(this.consolidatedData).length} players and ${Object.keys(this.adpData).length} ADP records.`);\n            console.log(`🔍 Sample consolidated players:`, Object.keys(this.consolidatedData).slice(0, 5));\n            console.log(`🔍 Sample ADP players:`, Object.keys(this.adpData).slice(0, 5));\n        } catch (error) {\n            console.error(\"❌ Failed to initialize Draft Analyzer:\", error);\n            throw new Error(\"Failed to load necessary data for analysis.\");\n        }\n    }\n    async fetchSleeperApi(url) {\n        console.log(`🔍 Fetching from Sleeper API: ${url}`);\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch from Sleeper API: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(`✅ Sleeper API response:`, {\n            url,\n            status: response.status,\n            dataType: Array.isArray(data) ? \"array\" : \"object\",\n            dataLength: Array.isArray(data) ? data.length : Object.keys(data).length,\n            sampleData: Array.isArray(data) ? data.slice(0, 2) : Object.keys(data).slice(0, 5)\n        });\n        return data;\n    }\n    parseSleeperDraftUrl(url) {\n        // Support both sleeper.com and sleeper.app domains and alphanumeric draft IDs\n        const regex = /sleeper\\.(?:com|app)\\/draft\\/nfl\\/([a-zA-Z0-9]+)/;\n        const match = url.match(regex);\n        if (!match || !match[1]) {\n            throw new Error(\"Invalid Sleeper mock draft URL format. Expected format: https://sleeper.app/draft/nfl/{draft_id}\");\n        }\n        return match[1];\n    }\n    normalizePlayerName(name) {\n        if (!name) return \"\";\n        // Remove common suffixes and normalize\n        return name.toLowerCase().replace(/\\s+(jr\\.?|sr\\.?|ii|iii|iv|v|vi|vii|viii|ix|x)\\s*$/i, \"\") // Remove suffixes\n        .replace(/\\s+/g, \" \") // Normalize whitespace\n        .trim();\n    }\n    findPlayerByName(playerName, position) {\n        if (!playerName) return null;\n        const normalizedName = this.normalizePlayerName(playerName);\n        console.log(`🔍 Looking for player: \"${playerName}\" -> normalized: \"${normalizedName}\"`);\n        // First try exact match with normalized name\n        let player = this.consolidatedData[normalizedName];\n        if (player) {\n            console.log(`✅ Found exact match: ${playerName}`);\n            return player;\n        }\n        // Try exact match with original name (case-insensitive)\n        player = this.consolidatedData[playerName.toLowerCase()];\n        if (player) {\n            console.log(`✅ Found exact match with original name: ${playerName}`);\n            return player;\n        }\n        // Try fuzzy matching by removing suffixes and checking partial matches\n        const nameParts = normalizedName.split(\" \");\n        if (nameParts.length >= 2) {\n            const firstName = nameParts[0];\n            const lastName = nameParts[nameParts.length - 1];\n            console.log(`🔍 Trying fuzzy match: firstName=\"${firstName}\", lastName=\"${lastName}\"`);\n            // Look for players with matching first and last name\n            for (const [key, data] of Object.entries(this.consolidatedData)){\n                const keyParts = key.split(\" \");\n                if (keyParts.length >= 2) {\n                    const keyFirstName = keyParts[0];\n                    const keyLastName = keyParts[keyParts.length - 1];\n                    if (keyFirstName === firstName && keyLastName === lastName) {\n                        console.log(`✅ Found fuzzy match: \"${playerName}\" -> \"${key}\"`);\n                        return data;\n                    }\n                }\n            }\n        }\n        // Last resort: try to find any player whose name contains the search name\n        for (const [key, data] of Object.entries(this.consolidatedData)){\n            if (key.includes(normalizedName) || normalizedName.includes(key)) {\n                console.log(`✅ Found partial match: \"${playerName}\" -> \"${key}\"`);\n                return data;\n            }\n        }\n        console.log(`❌ No match found for: ${playerName}`);\n        console.log(`🔍 Available players starting with similar names:`, Object.keys(this.consolidatedData).filter((k)=>k.includes(normalizedName.split(\" \")[0])).slice(0, 5));\n        return null;\n    }\n    getPlayerProjectedPoints(playerName, position) {\n        const player = this.findPlayerByName(playerName, position);\n        if (!player || !player.projections) {\n            console.log(`⚠️ No player or projections found for: ${playerName} (${position})`);\n            return 0;\n        }\n        const posKey = position?.toLowerCase();\n        console.log(`🔍 Looking for projections for ${playerName} at position: ${posKey}`);\n        console.log(`🔍 Available projection keys:`, Object.keys(player.projections));\n        let fpts = 0;\n        // Handle defense projections - try multiple approaches\n        if (posKey === \"def\" || posKey === \"defense\") {\n            console.log(`🛡️ Processing DEFENSE player: ${playerName}`);\n            // Method 1: Try exact position keys\n            const defenseKeys = [\n                \"def\",\n                \"DEF\",\n                \"defense\",\n                \"Defense\",\n                \"DEFENSE\"\n            ];\n            for (const key of defenseKeys){\n                if (player.projections[key]?.fpts) {\n                    fpts = player.projections[key].fpts;\n                    console.log(`✅ Found defense projections using key: ${key} = ${fpts}`);\n                    break;\n                }\n            }\n            // Method 2: Try partial key matching\n            if (!fpts) {\n                for (const key of Object.keys(player.projections)){\n                    if (key.toLowerCase().includes(\"def\")) {\n                        fpts = player.projections[key].fpts;\n                        console.log(`✅ Found defense projections using partial key: ${key} = ${fpts}`);\n                        break;\n                    }\n                }\n            }\n            // Method 3: Look for any numeric projection value\n            if (!fpts) {\n                for (const key of Object.keys(player.projections)){\n                    const projection = player.projections[key];\n                    if (projection && typeof projection === \"object\" && projection.fpts) {\n                        fpts = projection.fpts;\n                        console.log(`✅ Found defense projections using generic key: ${key} = ${fpts}`);\n                        break;\n                    }\n                }\n            }\n            // Method 4: Look for any numeric value in projections\n            if (!fpts) {\n                for (const key of Object.keys(player.projections)){\n                    const value = player.projections[key];\n                    if (typeof value === \"number\" && value > 0) {\n                        fpts = value;\n                        console.log(`✅ Found defense projections using numeric key: ${key} = ${fpts}`);\n                        break;\n                    }\n                }\n            }\n            // Method 5: Check if projections is just a number (some defenses have this)\n            if (!fpts && typeof player.projections === \"number\" && player.projections > 0) {\n                fpts = player.projections;\n                console.log(`✅ Found defense projections as direct number: ${fpts}`);\n            }\n        } else {\n            // Non-defense players - try standard approach\n            fpts = player.projections[posKey]?.fpts;\n        }\n        if (fpts) {\n            console.log(`✅ Projected points for ${playerName}: ${fpts}`);\n            return typeof fpts === \"number\" ? fpts : parseFloat(fpts);\n        } else {\n            console.log(`❌ No projected points found for ${playerName} at position ${posKey}`);\n            console.log(`🔍 Player projections structure:`, player.projections);\n            return 0;\n        }\n    }\n    getPlayerAdp(playerName) {\n        const player = this.findPlayerByName(playerName, \"\");\n        if (!player) return 0;\n        // Try to find in ADP data with normalized name\n        const normalizedName = this.normalizePlayerName(playerName);\n        let adpPlayer = this.adpData[normalizedName];\n        if (!adpPlayer) {\n            // Try fuzzy matching for ADP too\n            const nameParts = normalizedName.split(\" \");\n            if (nameParts.length >= 2) {\n                const firstName = nameParts[0];\n                const lastName = nameParts[nameParts.length - 1];\n                for (const [key, data] of Object.entries(this.adpData)){\n                    const keyParts = key.split(\" \");\n                    if (keyParts.length >= 2) {\n                        const keyFirstName = keyParts[0];\n                        const keyLastName = keyParts[keyParts.length - 1];\n                        if (keyFirstName === firstName && keyLastName === lastName) {\n                            adpPlayer = data;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        const adp = adpPlayer?.adp_value;\n        return adp ? parseFloat(adp) : 0;\n    }\n    getPlayerVorp(playerName) {\n        const normalizedName = this.normalizePlayerName(playerName);\n        if (!normalizedName) return 0;\n        const direct = Array.isArray(this.vorpData) ? this.vorpData.find((p)=>{\n            const pName = this.normalizePlayerName(p.playerName || \"\");\n            return pName === normalizedName;\n        }) : undefined;\n        return direct?.vorp_score || direct?.vorpScore ? parseFloat(direct.vorp_score || direct.vorpScore) : 0;\n    }\n    async analyzeDraft(draftUrl, leagueType = \"standard\") {\n        await this.initialize();\n        console.log(\"\\uD83D\\uDD0D Fetching draft data from Sleeper...\");\n        const draftId = this.parseSleeperDraftUrl(draftUrl);\n        // Fetch draft data\n        const draftData = await this.fetchSleeperApi(`https://api.sleeper.app/v1/draft/${draftId}`);\n        const draftPicks = await this.fetchSleeperApi(`https://api.sleeper.app/v1/draft/${draftId}/picks?limit=1000`);\n        console.log(\"\\uD83D\\uDCCA Draft data fetched:\", {\n            draftName: draftData.name,\n            teams: draftData.teams?.length || 0,\n            rounds: draftData.settings?.rounds || 0,\n            picks: draftPicks?.length || 0,\n            expectedPicks: (draftData.teams?.length || 0) * (draftData.settings?.rounds || 0)\n        });\n        // Process draft picks and build team rosters\n        const teams = await this.buildTeamRosters(draftData, draftPicks);\n        // Calculate optimal lineups and grades\n        const result = this.analyzeTeams(teams, leagueType);\n        return {\n            draftInfo: {\n                name: draftData.name,\n                teams: draftData.teams?.length || 0,\n                rounds: draftData.settings?.rounds || 0,\n                totalPicks: draftPicks?.length || 0\n            },\n            ...result\n        };\n    }\n    analyzeTeams(teams, leagueType = \"standard\") {\n        const lineupEngine = new _lib_optimal_lineup_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        const gradeEngine = new _lib_position_grade_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        // Get actual draft dimensions from the teams data\n        const actualTeams = Object.keys(teams).length;\n        const actualRounds = Math.max(...Object.values(teams).map((team)=>Math.max(...(team.roster || []).map((p)=>p.round || 0))), 16);\n        console.log(\"\\uD83D\\uDCCA Draft dimensions:\", {\n            actualTeams,\n            actualRounds\n        });\n        // First calculate optimal lineups for all teams\n        const analysisTeams = Object.entries(teams).map(([id, team])=>{\n            const lineup = lineupEngine.calculateOptimalLineup(team.roster, {\n                leagueType,\n                scoring: \"ppr\",\n                teams: actualTeams,\n                rounds: actualRounds\n            });\n            // Calculate average ADP\n            const adpValues = team.roster.map((p)=>p.adpValue || 0).filter((v)=>v !== 0);\n            const averageAdpValue = adpValues.length > 0 ? adpValues.reduce((s, v)=>s + v, 0) / adpValues.length : 0;\n            // Calculate average VORP\n            const vorpValues = team.roster.map((p)=>p.vorpScore || 0).filter((v)=>v !== 0);\n            const averageVorpScore = vorpValues.length > 0 ? vorpValues.reduce((s, v)=>s + v, 0) / vorpValues.length : 0;\n            // Calculate optimal lineup points\n            const optimalLineupPoints = lineupEngine.calculateTotalProjectedPoints(lineup);\n            // Get bench players and points\n            const benchPlayers = lineupEngine.getBenchPlayers(team.roster, lineup);\n            const benchPoints = lineupEngine.calculateTotalProjectedPoints(benchPlayers);\n            // Get lineup analysis\n            const lineupAnalysis = lineupEngine.analyzeLineup(lineup, {\n                leagueType,\n                scoring: \"ppr\",\n                teams: Object.keys(teams).length\n            });\n            return {\n                teamId: id,\n                teamName: team.teamName,\n                draftSlot: team.draftSlot,\n                roster: team.roster,\n                optimalLineup: lineup,\n                optimalLineupPoints,\n                benchPlayers,\n                benchPoints,\n                totalProjectedPoints: optimalLineupPoints + benchPoints,\n                averageAdpValue,\n                averageVorpScore,\n                lineupAnalysis\n            };\n        });\n        // Now calculate position grades using the teams with optimal lineups\n        const gradedTeams = gradeEngine.calculatePositionGrades(analysisTeams, {\n            leagueType,\n            scoring: \"ppr\",\n            teams: Object.keys(teams).length\n        });\n        // Map the graded teams back to the expected format for the frontend\n        const finalTeams = gradedTeams.map((gradedTeam)=>{\n            // Find the original analysis team data\n            const originalTeam = analysisTeams.find((t)=>t.teamId === gradedTeam.teamId);\n            return {\n                teamId: gradedTeam.teamId,\n                teamName: gradedTeam.teamName,\n                draftSlot: originalTeam?.draftSlot || 0,\n                optimalLineup: originalTeam?.optimalLineup || {},\n                optimalLineupPoints: originalTeam?.optimalLineupPoints || 0,\n                benchPlayers: originalTeam?.benchPlayers || [],\n                benchPoints: originalTeam?.benchPoints || 0,\n                positionGrades: gradedTeam.positionGrades || {},\n                overallGrade: gradedTeam.overallGrade || {\n                    grade: \"—\",\n                    score: 0\n                },\n                totalProjectedPoints: (originalTeam?.optimalLineupPoints || 0) + (originalTeam?.benchPoints || 0),\n                averageProjectedPoints: (()=>{\n                    if (!originalTeam?.roster?.length) return 0;\n                    return originalTeam.roster.reduce((sum, p)=>sum + (p.projectedPoints || 0), 0) / originalTeam.roster.length;\n                })(),\n                averageAdpValue: originalTeam?.averageAdpValue || 0,\n                averageVorpScore: originalTeam?.averageVorpScore || 0,\n                players: originalTeam?.roster || [],\n                roster: originalTeam?.roster || []\n            };\n        });\n        return {\n            analysis: {\n                teams: finalTeams\n            }\n        };\n    }\n    async buildTeamRosters(draftData, draftPicks) {\n        const slotToRosterId = draftData.slot_to_roster_id;\n        if (!slotToRosterId) {\n            throw new Error(\"No slot_to_roster_id found in draft data - this may not be a mock draft\");\n        }\n        const slotToName = {};\n        // SMART USERNAME DETECTION - Don't rely on failing endpoints\n        if (draftData.metadata?.draft_order_by_roster_id) {\n            // Use metadata if available\n            Object.entries(draftData.metadata.draft_order_by_roster_id).forEach(([rosterId, slot])=>{\n                slotToName[slot] = `Team ${parseInt(rosterId) + 1}`;\n            });\n        } else {\n            // Fallback to slot numbers\n            Object.keys(slotToRosterId).forEach((slot)=>{\n                slotToName[slot] = `Team ${parseInt(slot) + 1}`;\n            });\n        }\n        // Fetch NFL players data\n        const playersMap = await this.fetchSleeperApi(`https://api.sleeper.app/v1/players/nfl`);\n        const getSleeperPlayer = (id)=>playersMap?.[id];\n        const teams = {};\n        // Process each pick and build team rosters\n        draftPicks.forEach((pick)=>{\n            const slot = pick.pick_no.toString();\n            const rosterId = slotToRosterId[slot];\n            if (!rosterId) {\n                console.warn(`No roster ID found for slot ${slot}`);\n                return;\n            }\n            if (!teams[rosterId]) {\n                teams[rosterId] = {\n                    teamId: rosterId,\n                    teamName: slotToName[slot] || `Team ${rosterId}`,\n                    draftSlot: parseInt(slot),\n                    roster: []\n                };\n            }\n            // Get player data\n            const sleeperPlayer = getSleeperPlayer(pick.player_id);\n            if (!sleeperPlayer) {\n                console.warn(`No player data found for ID ${pick.player_id}`);\n                return;\n            }\n            // Enhance player data with projections and VORP\n            const enhancedPlayer = this.enhancePlayerData(sleeperPlayer, pick);\n            teams[rosterId].roster.push(enhancedPlayer);\n        });\n        return teams;\n    }\n    enhancePlayerData(sleeperPlayer, pick) {\n        const playerName = sleeperPlayer.full_name || `${sleeperPlayer.first_name || \"\"} ${sleeperPlayer.last_name || \"\"}`.trim();\n        const position = sleeperPlayer.position || pick.metadata?.position || \"\";\n        const projectedPoints = this.getPlayerProjectedPoints(playerName, position);\n        const adpValue = this.getPlayerAdp(playerName);\n        const vorpScore = this.getPlayerVorp(playerName);\n        // Calculate draft value: negative means player was drafted above ADP (good value)\n        const draftValue = adpValue > 0 ? adpValue - pick.draft_slot : 0;\n        return {\n            ...pick,\n            metadata: sleeperPlayer,\n            playerName,\n            position,\n            projectedPoints,\n            adpValue,\n            vorpScore,\n            draftValue,\n            playerId: pick.player_id\n        };\n    }\n    constructor(){\n        this.consolidatedData = {};\n        this.nameLookupIndex = {};\n        this.playerDetails = {};\n        this.vorpData = {};\n        this.adpData = {} // Added adpData property\n        ;\n    }\n}\nasync function POST(request) {\n    try {\n        const { draftUrl, leagueType = \"standard\" } = await request.json();\n        if (!draftUrl) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Draft URL is required\"\n            });\n        }\n        console.log(\"\\uD83D\\uDE80 Starting draft analysis...\");\n        console.log(\"\\uD83D\\uDD0D Draft URL:\", draftUrl);\n        console.log(\"\\uD83C\\uDFC8 League Type:\", leagueType);\n        const analyzer = new DraftAnalyzer();\n        await analyzer.initialize();\n        const result = await analyzer.analyzeDraft(draftUrl, leagueType);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        console.error(\"❌ Error in draft analysis:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error occurred\"\n        });\n    }\n}\nfunction GET() {\n    return new Response(\"Method Not Allowed\", {\n        status: 405,\n        headers: {\n            Allow: \"POST\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze-draft/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/optimal-lineup-engine.ts":
/*!******************************************!*\
  !*** ./app/lib/optimal-lineup-engine.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OptimalLineupEngine)\n/* harmony export */ });\nclass OptimalLineupEngine {\n    getRosterRequirements(leagueType = \"standard\", actualTeams = 12, actualRounds = 16) {\n        // Fixed starter requirements - bench size scales with rounds, not starters\n        const baseRequirements = {\n            standard: {\n                QB: 1,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 1,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            },\n            superflex: {\n                QB: 1,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 1,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"QB\",\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            },\n            \"2qb\": {\n                QB: 2,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 1,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            },\n            \"2flex\": {\n                QB: 1,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 2,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            }\n        };\n        const requirements = baseRequirements[leagueType] || baseRequirements.standard;\n        // Calculate total starters (fixed, doesn't change with rounds)\n        const totalStarters = Object.entries(requirements).filter(([key])=>![\n                \"flexPositions\",\n                \"superflexPositions\"\n            ].includes(key)).reduce((sum, [_, count])=>sum + (typeof count === \"number\" ? count : 0), 0);\n        return {\n            ...requirements,\n            totalStarters,\n            // Add metadata about the dynamic calculation\n            _metadata: {\n                actualTeams,\n                actualRounds,\n                leagueType,\n                calculatedAt: new Date().toISOString()\n            }\n        };\n    }\n    calculateOptimalLineup(roster, settings = {}) {\n        const leagueType = settings.leagueType || \"standard\";\n        const actualTeams = settings.teams || 12;\n        const actualRounds = settings.rounds || 16; // Get actual rounds from settings\n        // Calculate roster requirements based on actual draft data\n        const requirements = this.getRosterRequirements(leagueType, actualTeams, actualRounds);\n        console.log(\"\\uD83D\\uDD0D Calculating optimal lineup:\", {\n            leagueType,\n            actualTeams,\n            actualRounds,\n            requirements: {\n                ...requirements,\n                _metadata: requirements._metadata\n            }\n        });\n        // Group players by position\n        const positionGroups = this.groupPlayersByPosition(roster);\n        // Start building optimal lineup\n        const optimalLineup = {};\n        const usedPlayers = new Set();\n        console.log(\"\\uD83D\\uDD0D Filling required positions...\");\n        // Fill required positions first (excluding special positions)\n        Object.entries(requirements).forEach(([position, count])=>{\n            if (position === \"totalStarters\" || position === \"flexPositions\" || position === \"superflexPositions\") return;\n            console.log(`🔍 Processing position: ${position}, count: ${count}`);\n            if (typeof count === \"number\" && count > 0) {\n                optimalLineup[position] = [];\n                // Get best players for this position\n                const availablePlayers = positionGroups[position] || [];\n                console.log(`🔍 Available players for ${position}:`, availablePlayers);\n                const sortedPlayers = availablePlayers.filter((p)=>!usedPlayers.has(p.playerId || p.playerName)).sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0)).slice(0, count);\n                console.log(`🔍 Selected players for ${position}:`, sortedPlayers);\n                optimalLineup[position] = sortedPlayers;\n                sortedPlayers.forEach((p)=>usedPlayers.add(p.playerId || p.playerName));\n            }\n        });\n        // Handle FLEX position\n        if (requirements.flexPositions) {\n            const flexPlayers = requirements.flexPositions.flatMap((pos)=>(positionGroups[pos] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName)));\n            if (flexPlayers.length > 0) {\n                const bestFlexPlayer = flexPlayers.sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0))[0];\n                if (bestFlexPlayer) {\n                    optimalLineup.FLEX = [\n                        bestFlexPlayer\n                    ];\n                    usedPlayers.add(bestFlexPlayer.playerId || bestFlexPlayer.playerName);\n                    // Log which type of flex this is\n                    if (leagueType === \"superflex\") {\n                        console.log(`🦸 Superflex FLEX: Selected ${bestFlexPlayer.position} ${bestFlexPlayer.playerName} with ${bestFlexPlayer.projectedPoints} points`);\n                    } else {\n                        console.log(`🔄 Standard FLEX: Selected ${bestFlexPlayer.position} ${bestFlexPlayer.playerName} with ${bestFlexPlayer.projectedPoints} points`);\n                    }\n                }\n            }\n        }\n        // Handle 2 FLEX positions (if applicable)\n        if (leagueType === \"2flex\" && requirements.FLEX === 2) {\n            optimalLineup.FLEX = [];\n            // Fill first flex spot\n            const bestFlexPlayer1 = this.findBestFlexPlayer(positionGroups, usedPlayers);\n            if (bestFlexPlayer1) {\n                optimalLineup.FLEX.push(bestFlexPlayer1);\n                usedPlayers.add(bestFlexPlayer1.playerId || bestFlexPlayer1.playerName);\n                console.log(`🔄 FLEX 1: Selected ${bestFlexPlayer1.position} ${bestFlexPlayer1.playerName} with ${bestFlexPlayer1.projectedPoints} points`);\n            }\n            // Fill second flex spot\n            const bestFlexPlayer2 = this.findBestFlexPlayer(positionGroups, usedPlayers);\n            if (bestFlexPlayer2) {\n                optimalLineup.FLEX.push(bestFlexPlayer2);\n                usedPlayers.add(bestFlexPlayer2.playerId || bestFlexPlayer2.playerName);\n                console.log(`🔄 FLEX 2: Selected ${bestFlexPlayer2.position} ${bestFlexPlayer2.playerName} with ${bestFlexPlayer2.projectedPoints} points`);\n            }\n        }\n        // Ensure all required positions have at least an empty array\n        Object.entries(requirements).forEach(([position, count])=>{\n            if (position === \"totalStarters\" || position === \"flexPositions\" || position === \"superflexPositions\") return;\n            if (typeof count === \"number\" && count > 0 && !optimalLineup[position]) {\n                optimalLineup[position] = [];\n            }\n        });\n        return optimalLineup;\n    }\n    findBestSuperflexPlayer(positionGroups, usedPlayers) {\n        // Get all available superflex eligible players\n        const availableQBs = (positionGroups[\"QB\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        const availableRBs = (positionGroups[\"RB\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        const availableWRs = (positionGroups[\"WR\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        const availableTEs = (positionGroups[\"TE\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        // In superflex, QBs are extremely valuable - give them priority\n        let bestSuperflexPlayer = null;\n        // First priority: Best available QB (QBs score much higher than other positions)\n        if (availableQBs.length > 0) {\n            const bestQB = availableQBs.sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0))[0];\n            bestSuperflexPlayer = bestQB;\n        }\n        // If no QBs available, select best RB/WR/TE\n        if (!bestSuperflexPlayer) {\n            const otherPlayers = [\n                ...availableRBs,\n                ...availableWRs,\n                ...availableTEs\n            ];\n            if (otherPlayers.length > 0) {\n                bestSuperflexPlayer = otherPlayers.sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0))[0];\n            }\n        }\n        return bestSuperflexPlayer;\n    }\n    findBestFlexPlayer(positionGroups, usedPlayers) {\n        // Get all available flex eligible players\n        const availableRBs = (positionGroups[\"RB\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        const availableWRs = (positionGroups[\"WR\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        const availableTEs = (positionGroups[\"TE\"] || []).filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n        // In flex, RB/WR/TE are all valuable - give them priority\n        let bestFlexPlayer = null;\n        // First priority: Best available RB\n        if (availableRBs.length > 0) {\n            const bestRB = availableRBs.sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0))[0];\n            bestFlexPlayer = bestRB;\n        }\n        // If no RBs available, select best WR/TE\n        if (!bestFlexPlayer) {\n            const otherPlayers = [\n                ...availableWRs,\n                ...availableTEs\n            ];\n            if (otherPlayers.length > 0) {\n                bestFlexPlayer = otherPlayers.sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0))[0];\n            }\n        }\n        return bestFlexPlayer;\n    }\n    groupPlayersByPosition(roster) {\n        const groups = {};\n        console.log(\"\\uD83D\\uDD0D Grouping players by position. Roster:\", roster);\n        roster.forEach((player)=>{\n            const position = (player.position || \"\").toUpperCase();\n            console.log(`🔍 Player: ${player.playerName}, Position: ${position}, Raw position: ${player.position}`);\n            if (!position) {\n                console.log(`⚠️ Skipping player ${player.playerName} - no position`);\n                return;\n            }\n            if (!groups[position]) {\n                groups[position] = [];\n            }\n            groups[position].push(player);\n        });\n        console.log(\"\\uD83D\\uDD0D Grouped players:\", groups);\n        return groups;\n    }\n    getBenchPlayers(roster, optimalLineup) {\n        const usedPlayers = new Set();\n        // Collect all players used in optimal lineup\n        Object.values(optimalLineup).forEach((players)=>{\n            if (Array.isArray(players)) {\n                players.forEach((p)=>{\n                    usedPlayers.add(p.playerId || p.playerName);\n                });\n            }\n        });\n        // Return players not used in optimal lineup\n        return roster.filter((p)=>!usedPlayers.has(p.playerId || p.playerName));\n    }\n    calculateTotalProjectedPoints(players) {\n        if (Array.isArray(players)) {\n            return players.reduce((total, player)=>total + (player.projectedPoints || 0), 0);\n        }\n        // Handle object format\n        let total = 0;\n        Object.values(players).forEach((positionPlayers)=>{\n            if (Array.isArray(positionPlayers)) {\n                total += positionPlayers.reduce((sum, p)=>sum + (p.projectedPoints || 0), 0);\n            }\n        });\n        return total;\n    }\n    analyzeLineup(optimalLineup, settings = {}) {\n        const leagueType = settings.leagueType || \"standard\";\n        const superflexSlots = settings.superflexSlots || 0;\n        const actualTeams = settings.teams || 12;\n        const actualRounds = 16; // Default to 16 rounds for dynamic calculation\n        const requirements = this.getRosterRequirements(leagueType, actualTeams, actualRounds);\n        return {\n            totalStarters: requirements.totalStarters,\n            leagueType,\n            superflexSlots: requirements.superflexPositions ? requirements.superflexPositions.length : 0,\n            requirements,\n            positionCounts: Object.entries(requirements).filter(([key])=>![\n                    \"totalStarters\",\n                    \"flexPositions\",\n                    \"superflexPositions\"\n                ].includes(key)).reduce((acc, [pos, count])=>({\n                    ...acc,\n                    [pos]: count\n                }), {})\n        };\n    }\n    // Calculate replacement baselines for VORP calculations\n    calculateReplacementBaselines(settings = {}) {\n        const leagueType = settings.leagueType || \"standard\";\n        const superflexSlots = settings.superflexSlots || 0;\n        const actualTeams = settings.teams || 12;\n        const actualRounds = 16; // Default to 16 rounds for dynamic calculation\n        const baselines = {\n            QB: actualTeams * (1 + superflexSlots),\n            RB: actualTeams * 2,\n            WR: actualTeams * 2,\n            TE: actualTeams * 1,\n            K: actualTeams * 1,\n            DEF: actualTeams * 1\n        };\n        return baselines;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/optimal-lineup-engine.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/position-grade-engine.ts":
/*!******************************************!*\
  !*** ./app/lib/position-grade-engine.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PositionGradeEngine)\n/* harmony export */ });\nclass PositionGradeEngine {\n    constructor(vorpArray = []){\n        this.vorpLookup = {};\n        this.leagueAverages = {};\n        this.leagueStdDevs = {};\n        vorpArray.forEach((p)=>{\n            const name = (p.playerName || \"\").toLowerCase();\n            const val = p.vorpScore ?? p.vorp_score ?? 0;\n            if (name) this.vorpLookup[name] = Number(val);\n        });\n    }\n    calculatePositionGrades(teams, settings = {}) {\n        const leagueType = settings.leagueType || \"standard\";\n        const actualTeams = settings.teams || 12;\n        const actualRounds = settings.rounds || 16;\n        // Get dynamic position requirements based on actual draft data\n        const positionRequirements = this.getPositionRequirements(leagueType, actualTeams, actualRounds);\n        console.log(\"\\uD83D\\uDCCA Position grade calculation:\", {\n            leagueType,\n            actualTeams,\n            actualRounds,\n            positionRequirements: {\n                ...positionRequirements,\n                _metadata: positionRequirements._metadata\n            }\n        });\n        // Calculate position grades for each team first\n        const teamsWithPositionGrades = teams.map((team)=>{\n            const positionGrades = this.calculateTeamPositionGrades(team, positionRequirements);\n            return {\n                ...team,\n                positionGrades\n            };\n        });\n        // Calculate overall grades based on actual performance, not forced percentiles\n        const teamsWithOverallScores = teamsWithPositionGrades.map((team)=>{\n            // Calculate overall score based on optimal lineup points\n            const overallScore = team.optimalLineupPoints || 0;\n            // Convert to letter grade based on actual performance thresholds\n            const overallGrade = this.scoreToGrade(overallScore);\n            return {\n                ...team,\n                overallGrade: {\n                    grade: overallGrade,\n                    score: overallScore,\n                    rawScore: overallScore\n                }\n            };\n        });\n        return teamsWithOverallScores;\n    }\n    calculateTeamPositionGrades(team, positionRequirements) {\n        const positionGrades = {};\n        // Extract position names from the requirements object (excluding metadata and flexPositions)\n        const positionNames = Object.keys(positionRequirements).filter((key)=>![\n                \"flexPositions\",\n                \"superflexPositions\",\n                \"totalStarters\",\n                \"_metadata\"\n            ].includes(key));\n        positionNames.forEach((pos)=>{\n            if (pos === \"FLEX\" || pos === \"SUPERFLEX\") {\n                // Handle flex positions specially\n                const flexPlayers = this.getFlexPlayers(team, pos);\n                if (flexPlayers.length > 0) {\n                    const grade = this.gradePositionSimple(flexPlayers, pos);\n                    positionGrades[pos] = grade;\n                }\n            } else {\n                // Handle regular positions\n                const players = this.getPositionPlayers(team, pos);\n                if (players.length > 0) {\n                    const grade = this.gradePositionSimple(players, pos);\n                    positionGrades[pos] = grade;\n                }\n            }\n        });\n        return positionGrades;\n    }\n    gradePositionSimple(players, position) {\n        if (players.length === 0) return {\n            grade: \"—\",\n            score: 0,\n            reason: \"No players\"\n        };\n        const totalPoints = players.reduce((sum, p)=>sum + (p.projectedPoints || 0), 0);\n        // Simple grading based on projected points thresholds for different positions\n        let grade = \"C\";\n        let gradeScore = totalPoints;\n        // Position-specific scoring thresholds (approximate)\n        const thresholds = {\n            \"QB\": {\n                excellent: 25,\n                good: 22,\n                average: 18,\n                poor: 15\n            },\n            \"RB\": {\n                excellent: 40,\n                good: 30,\n                average: 22,\n                poor: 15\n            },\n            \"WR\": {\n                excellent: 40,\n                good: 30,\n                average: 22,\n                poor: 15\n            },\n            \"TE\": {\n                excellent: 15,\n                good: 12,\n                average: 9,\n                poor: 6\n            },\n            \"FLEX\": {\n                excellent: 20,\n                good: 15,\n                average: 12,\n                poor: 8\n            },\n            \"SUPERFLEX\": {\n                excellent: 25,\n                good: 20,\n                average: 15,\n                poor: 10\n            },\n            \"K\": {\n                excellent: 10,\n                good: 8,\n                average: 6,\n                poor: 4\n            },\n            \"DEF\": {\n                excellent: 12,\n                good: 9,\n                average: 7,\n                poor: 5\n            }\n        };\n        const threshold = thresholds[position] || thresholds[\"FLEX\"];\n        if (totalPoints >= threshold.excellent) grade = \"A+\";\n        else if (totalPoints >= threshold.good) grade = \"A\";\n        else if (totalPoints >= threshold.average) grade = \"B\";\n        else if (totalPoints >= threshold.poor) grade = \"C\";\n        else grade = \"D\";\n        return {\n            grade,\n            score: totalPoints,\n            reason: this.generatePositionReason(grade, 0, position)\n        };\n    }\n    getFlexPlayers(team, flexType) {\n        const flexPositions = flexType === \"SUPERFLEX\" ? [\n            \"QB\",\n            \"RB\",\n            \"WR\",\n            \"TE\"\n        ] : [\n            \"RB\",\n            \"WR\",\n            \"TE\"\n        ];\n        const allFlexPlayers = [];\n        // Look at the roster for flex players, not the optimal lineup\n        if (!team.roster) return [];\n        flexPositions.forEach((pos)=>{\n            const players = (team.roster || []).filter((p)=>(p.position || \"\").toUpperCase() === pos);\n            allFlexPlayers.push(...players);\n        });\n        // Sort by projected points and take top players\n        return allFlexPlayers.sort((a, b)=>(b.projectedPoints || 0) - (a.projectedPoints || 0)).slice(0, 3); // Top 3 for flex grading\n    }\n    getPositionPlayers(team, position) {\n        // For regular positions (QB, RB, WR, TE, K, DEF), look at the roster\n        if (position !== \"FLEX\" && position !== \"SUPERFLEX\") {\n            if (!team.roster) return [];\n            return (team.roster || []).filter((p)=>(p.position || \"\").toUpperCase() === position);\n        }\n        // For flex positions, look at the optimal lineup\n        if (!team.optimalLineup || !team.optimalLineup[position]) return [];\n        return team.optimalLineup[position] || [];\n    }\n    calculateOverallGrade(team, positionGrades, settings = {}) {\n        // Calculate weighted overall score based on position grades\n        const leagueType = settings.leagueType || \"standard\";\n        const superflexSlots = settings.superflexSlots || 0;\n        const positionWeights = {\n            \"QB\": leagueType === \"superflex\" ? 1.4 : 1.2,\n            \"RB\": 1.0,\n            \"WR\": 1.0,\n            \"TE\": 0.9,\n            \"FLEX\": 0.8,\n            \"SUPERFLEX\": leagueType === \"superflex\" ? 1.3 : 0.8,\n            \"K\": 0.3,\n            \"DEF\": 0.4 // Defense less important\n        };\n        let totalWeightedScore = 0;\n        let totalWeight = 0;\n        Object.entries(positionGrades).forEach(([pos, grade])=>{\n            if (grade && grade.grade !== \"—\") {\n                const weight = positionWeights[pos] || 1.0;\n                const gradeScore = this.gradeToScore(grade.grade);\n                totalWeightedScore += gradeScore * weight;\n                totalWeight += weight;\n            }\n        });\n        if (totalWeight === 0) return {\n            grade: \"—\",\n            score: 0\n        };\n        const overallScore = totalWeightedScore / totalWeight;\n        const overallGrade = this.scoreToGrade(overallScore);\n        return {\n            grade: overallGrade,\n            score: overallScore,\n            totalWeightedScore,\n            totalWeight\n        };\n    }\n    gradePosition(players, position) {\n        if (players.length === 0) return {\n            grade: \"—\",\n            score: 0,\n            reason: \"No players\"\n        };\n        const totalPoints = players.reduce((sum, p)=>sum + (p.projectedPoints || 0), 0);\n        const avgVorp = players.reduce((sum, p)=>sum + (p.vorpScore || 0), 0) / players.length;\n        // Get league average for this position\n        const leagueAvg = this.leagueAverages[position] || 0;\n        const leagueStdDev = this.leagueStdDevs[position] || 1;\n        // Calculate z-score\n        const zScore = leagueStdDev > 0 ? (totalPoints - leagueAvg) / leagueStdDev : 0;\n        // Convert to grade\n        const grade = this.zScoreToGrade(zScore);\n        return {\n            grade,\n            score: totalPoints,\n            zScore,\n            avgVorp,\n            reason: this.generatePositionReason(grade, zScore, position)\n        };\n    }\n    zScoreToGrade(zScore) {\n        if (zScore >= 1.5) return \"A+\";\n        if (zScore >= 1.0) return \"A\";\n        if (zScore >= 0.5) return \"B+\";\n        if (zScore >= 0.0) return \"B\";\n        if (zScore >= -0.5) return \"C+\";\n        if (zScore >= -1.0) return \"C\";\n        if (zScore >= -1.5) return \"D+\";\n        if (zScore >= -2.0) return \"D\";\n        return \"F\";\n    }\n    gradeToScore(grade) {\n        const gradeScores = {\n            \"A+\": 95,\n            \"A\": 90,\n            \"A-\": 85,\n            \"B+\": 80,\n            \"B\": 75,\n            \"B-\": 70,\n            \"C+\": 65,\n            \"C\": 60,\n            \"C-\": 55,\n            \"D+\": 50,\n            \"D\": 45,\n            \"D-\": 40,\n            \"F\": 30\n        };\n        return gradeScores[grade] || 50;\n    }\n    scoreToGrade(score) {\n        // Realistic scoring thresholds based on actual fantasy football performance\n        // These thresholds allow for genuine grade distribution based on team quality\n        if (score >= 200) return \"A+\"; // Exceptional team\n        if (score >= 185) return \"A\"; // Excellent team  \n        if (score >= 170) return \"A-\"; // Very good team\n        if (score >= 155) return \"B+\"; // Good team\n        if (score >= 140) return \"B\"; // Above average team\n        if (score >= 125) return \"B-\"; // Slightly above average\n        if (score >= 110) return \"C+\"; // Average team\n        if (score >= 95) return \"C\"; // Below average team\n        if (score >= 80) return \"C-\"; // Poor team\n        if (score >= 65) return \"D+\"; // Very poor team\n        if (score >= 50) return \"D\"; // Terrible team\n        return \"F\"; // Complete failure\n    }\n    generatePositionReason(grade, zScore, position) {\n        if (grade.startsWith(\"A\")) return `Excellent ${position} performance`;\n        if (grade.startsWith(\"B\")) return `Good ${position} performance`;\n        if (grade.startsWith(\"C\")) return `Average ${position} performance`;\n        if (grade.startsWith(\"D\")) return `Below average ${position} performance`;\n        return `Poor ${position} performance`;\n    }\n    calculateLeagueStats(teams, positionRequirements) {\n        const positionStats = {};\n        // Initialize position stats\n        positionRequirements.forEach((pos)=>{\n            positionStats[pos] = {\n                points: [],\n                vorp: []\n            };\n        });\n        // Collect all player stats across teams\n        teams.forEach((team)=>{\n            (team.roster || []).forEach((player)=>{\n                const pos = (player.position || \"\").toUpperCase();\n                if (!pos || !positionStats[pos]) return;\n                const points = player.projectedPoints || 0;\n                const vorp = this.getPlayerVorp(player.playerName || player.name || \"\");\n                positionStats[pos].points.push(points);\n                positionStats[pos].vorp.push(vorp);\n            });\n        });\n        // Calculate averages and standard deviations\n        Object.keys(positionStats).forEach((pos)=>{\n            const points = positionStats[pos].points.filter((p)=>p > 0);\n            const vorp = positionStats[pos].vorp.filter((v)=>v !== 0);\n            if (points.length > 0) {\n                this.leagueAverages[pos] = points.reduce((sum, p)=>sum + p, 0) / points.length;\n                this.leagueStdDevs[pos] = this.calculateStdDev(points, this.leagueAverages[pos]);\n            }\n            if (vorp.length > 0) {\n                this.leagueAverages[`${pos}_VORP`] = vorp.reduce((sum, v)=>sum + v, 0) / vorp.length;\n                this.leagueStdDevs[`${pos}_VORP`] = this.calculateStdDev(vorp, this.leagueAverages[`${pos}_VORP`]);\n            }\n        });\n    }\n    calculateStdDev(values, mean) {\n        if (values.length <= 1) return 0;\n        const variance = values.reduce((sum, val)=>sum + Math.pow(val - mean, 2), 0) / values.length;\n        return Math.sqrt(variance);\n    }\n    getPlayerVorp(playerName) {\n        if (!playerName) return 0;\n        const normalizedName = playerName.toLowerCase();\n        return this.vorpLookup[normalizedName] || 0;\n    }\n    getPositionRequirements(leagueType = \"standard\", actualTeams = 12, actualRounds = 16) {\n        // Fixed starter requirements - bench size scales with rounds, not starters\n        const baseRequirements = {\n            standard: {\n                QB: 1,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 1,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            },\n            superflex: {\n                QB: 1,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 1,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"QB\",\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            },\n            \"2qb\": {\n                QB: 2,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 1,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            },\n            \"2flex\": {\n                QB: 1,\n                RB: 2,\n                WR: 2,\n                TE: 1,\n                FLEX: 2,\n                DEF: 1,\n                K: 1,\n                flexPositions: [\n                    \"RB\",\n                    \"WR\",\n                    \"TE\"\n                ],\n                superflexPositions: []\n            }\n        };\n        const requirements = baseRequirements[leagueType] || baseRequirements.standard;\n        // Calculate total starters (fixed, doesn't change with rounds)\n        const totalStarters = Object.entries(requirements).filter(([key])=>![\n                \"flexPositions\",\n                \"superflexPositions\"\n            ].includes(key)).reduce((sum, [_, count])=>sum + (typeof count === \"number\" ? count : 0), 0);\n        return {\n            ...requirements,\n            totalStarters,\n            _metadata: {\n                actualTeams,\n                actualRounds,\n                leagueType,\n                calculatedAt: new Date().toISOString()\n            }\n        };\n    }\n    // Calculate replacement baselines for VORP calculations\n    calculateReplacementBaselines(settings = {}) {\n        const leagueType = settings.leagueType || \"standard\";\n        const superflexSlots = settings.superflexSlots || 0;\n        const teams = settings.teams || 12;\n        const baselines = {\n            QB: teams * (1 + superflexSlots),\n            RB: teams * 2,\n            WR: teams * 2,\n            TE: teams * 1,\n            K: teams * 1,\n            DEF: teams * 1\n        };\n        return baselines;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/position-grade-engine.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-draft%2Froute&page=%2Fapi%2Fanalyze-draft%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-draft%2Froute.ts&appDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkanikameister%2FDocuments%2Fff_api_skeleton&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();